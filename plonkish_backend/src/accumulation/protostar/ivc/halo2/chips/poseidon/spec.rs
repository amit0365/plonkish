//! This file was generated by running generate_params.py
//! Specification for rate 4 Poseidon using the BN256 curve.
//! Patterned after [halo2_gadgets::poseidon::primitives::P128Pow5T3]

pub const R_F: usize = 8;
pub const R_P: usize = 56;
pub const SECURE_MDS: usize = 0;

use crate::util::{end_timer, start_timer};

use super::params as poseidon_params;
use halo2_base::utils::{FromUniformBytes, PrimeField};
use halo2_gadgets::poseidon::primitives::*;
use halo2_proofs::arithmetic::Field;
use halo2_proofs::halo2curves::bn256::Fq as Fp;

#[derive(Debug, Clone, Copy)]
pub struct PoseidonSpecFp;

#[derive(Debug, Clone, Copy)]
pub struct PoseidonSpec;

pub(crate) type MdsFp<Fp, const T: usize> = [[Fp; T]; T];

impl Spec<Fp, 5, 4> for PoseidonSpecFp {
    fn full_rounds() -> usize {
        8
    }

    fn partial_rounds() -> usize {
        56
    }

    fn sbox(val: Fp) -> Fp {
        val.pow_vartime([5])
    }

    fn secure_mds() -> usize {
        unimplemented!()
    }

    fn constants() -> (Vec<[Fp; 5]>, MdsFp<Fp, 5>, MdsFp<Fp, 5>, [Fp; 5]) {
        (
            poseidon_params::ROUND_CONSTANTS[..].to_vec(),
            poseidon_params::MDS,
            poseidon_params::MDS_INV,
            poseidon_params::MDS_INV[0],
        )
    }
}

impl<F: PrimeField, const T: usize, const R: usize> Spec<F, T, R> for PoseidonSpec 
where
F: FromUniformBytes<64> + Ord,
{
    fn full_rounds() -> usize {
        R_F
    }

    fn partial_rounds() -> usize {
        R_P
    }

    fn sbox(val: F) -> F {
        val.pow_vartime([5])
    }

    fn secure_mds() -> usize {
        SECURE_MDS
    }

    fn constants() -> (Vec<[F; T]>, Mds<F, T>, Mds<F, T>, [F; T]) {
        let timer = start_timer(|| "generate_constants");
        let constants = generate_constants::<F, PoseidonSpec, T, R>();
        end_timer(timer);
        constants
    }
}
