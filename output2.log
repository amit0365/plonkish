   Compiling plonkish_backend v0.1.0 (/Users/ak36/Desktop/bunz/plonkish/plonkish_backend)
    Finished release [optimized] target(s) in 23.87s
     Running unittests src/lib.rs (target/release/deps/plonkish_backend-8a9111721242150b)

running 1 test
cs: ConstraintSystem { num_fixed_columns: 2, num_advice_columns: 10, num_instance_columns: 2, num_selectors: 8, num_challenges: 0, advice_column_phase: [Phase(0), Phase(0), Phase(0), Phase(0), Phase(0), Phase(0), Phase(0), Phase(0), Phase(0), Phase(0)], challenge_phase: [], selector_map: [], gates: [Gate { name: "b = a", constraint_names: [""], polys: [Product(Selector(Selector(0, true)), Sum(Advice { query_index: 1, column_index: 1, rotation: Rotation(0) }, Negated(Advice { query_index: 0, column_index: 0, rotation: Rotation(0) })))], queried_selectors: [Selector(0, true)], queried_cells: [VirtualCell { column: Column { index: 0, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 1, column_type: Advice }, rotation: Rotation(0) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(1, true)), Sum(Sum(Advice { query_index: 2, column_index: 2, rotation: Rotation(0) }, Product(Advice { query_index: 3, column_index: 2, rotation: Rotation(1) }, Advice { query_index: 4, column_index: 2, rotation: Rotation(2) })), Negated(Advice { query_index: 5, column_index: 2, rotation: Rotation(3) })))], queried_selectors: [Selector(1, true)], queried_cells: [VirtualCell { column: Column { index: 2, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 2, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 2, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 2, column_type: Advice }, rotation: Rotation(3) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(2, true)), Sum(Sum(Advice { query_index: 6, column_index: 3, rotation: Rotation(0) }, Product(Advice { query_index: 7, column_index: 3, rotation: Rotation(1) }, Advice { query_index: 8, column_index: 3, rotation: Rotation(2) })), Negated(Advice { query_index: 9, column_index: 3, rotation: Rotation(3) })))], queried_selectors: [Selector(2, true)], queried_cells: [VirtualCell { column: Column { index: 3, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 3, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 3, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 3, column_type: Advice }, rotation: Rotation(3) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(3, true)), Sum(Sum(Advice { query_index: 10, column_index: 4, rotation: Rotation(0) }, Product(Advice { query_index: 11, column_index: 4, rotation: Rotation(1) }, Advice { query_index: 12, column_index: 4, rotation: Rotation(2) })), Negated(Advice { query_index: 13, column_index: 4, rotation: Rotation(3) })))], queried_selectors: [Selector(3, true)], queried_cells: [VirtualCell { column: Column { index: 4, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 4, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 4, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 4, column_type: Advice }, rotation: Rotation(3) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(4, true)), Sum(Sum(Advice { query_index: 14, column_index: 5, rotation: Rotation(0) }, Product(Advice { query_index: 15, column_index: 5, rotation: Rotation(1) }, Advice { query_index: 16, column_index: 5, rotation: Rotation(2) })), Negated(Advice { query_index: 17, column_index: 5, rotation: Rotation(3) })))], queried_selectors: [Selector(4, true)], queried_cells: [VirtualCell { column: Column { index: 5, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 5, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 5, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 5, column_type: Advice }, rotation: Rotation(3) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(5, true)), Sum(Sum(Advice { query_index: 18, column_index: 6, rotation: Rotation(0) }, Product(Advice { query_index: 19, column_index: 6, rotation: Rotation(1) }, Advice { query_index: 20, column_index: 6, rotation: Rotation(2) })), Negated(Advice { query_index: 21, column_index: 6, rotation: Rotation(3) })))], queried_selectors: [Selector(5, true)], queried_cells: [VirtualCell { column: Column { index: 6, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 6, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 6, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 6, column_type: Advice }, rotation: Rotation(3) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(6, true)), Sum(Sum(Advice { query_index: 22, column_index: 7, rotation: Rotation(0) }, Product(Advice { query_index: 23, column_index: 7, rotation: Rotation(1) }, Advice { query_index: 24, column_index: 7, rotation: Rotation(2) })), Negated(Advice { query_index: 25, column_index: 7, rotation: Rotation(3) })))], queried_selectors: [Selector(6, true)], queried_cells: [VirtualCell { column: Column { index: 7, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 7, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 7, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 7, column_type: Advice }, rotation: Rotation(3) }] }, Gate { name: "1 column a + b * c = out", constraint_names: [""], polys: [Product(Selector(Selector(7, true)), Sum(Sum(Advice { query_index: 26, column_index: 8, rotation: Rotation(0) }, Product(Advice { query_index: 27, column_index: 8, rotation: Rotation(1) }, Advice { query_index: 28, column_index: 8, rotation: Rotation(2) })), Negated(Advice { query_index: 29, column_index: 8, rotation: Rotation(3) })))], queried_selectors: [Selector(7, true)], queried_cells: [VirtualCell { column: Column { index: 8, column_type: Advice }, rotation: Rotation(0) }, VirtualCell { column: Column { index: 8, column_type: Advice }, rotation: Rotation(1) }, VirtualCell { column: Column { index: 8, column_type: Advice }, rotation: Rotation(2) }, VirtualCell { column: Column { index: 8, column_type: Advice }, rotation: Rotation(3) }] }], advice_queries: [(Column { index: 0, column_type: Advice }, Rotation(0)), (Column { index: 1, column_type: Advice }, Rotation(0)), (Column { index: 2, column_type: Advice }, Rotation(0)), (Column { index: 2, column_type: Advice }, Rotation(1)), (Column { index: 2, column_type: Advice }, Rotation(2)), (Column { index: 2, column_type: Advice }, Rotation(3)), (Column { index: 3, column_type: Advice }, Rotation(0)), (Column { index: 3, column_type: Advice }, Rotation(1)), (Column { index: 3, column_type: Advice }, Rotation(2)), (Column { index: 3, column_type: Advice }, Rotation(3)), (Column { index: 4, column_type: Advice }, Rotation(0)), (Column { index: 4, column_type: Advice }, Rotation(1)), (Column { index: 4, column_type: Advice }, Rotation(2)), (Column { index: 4, column_type: Advice }, Rotation(3)), (Column { index: 5, column_type: Advice }, Rotation(0)), (Column { index: 5, column_type: Advice }, Rotation(1)), (Column { index: 5, column_type: Advice }, Rotation(2)), (Column { index: 5, column_type: Advice }, Rotation(3)), (Column { index: 6, column_type: Advice }, Rotation(0)), (Column { index: 6, column_type: Advice }, Rotation(1)), (Column { index: 6, column_type: Advice }, Rotation(2)), (Column { index: 6, column_type: Advice }, Rotation(3)), (Column { index: 7, column_type: Advice }, Rotation(0)), (Column { index: 7, column_type: Advice }, Rotation(1)), (Column { index: 7, column_type: Advice }, Rotation(2)), (Column { index: 7, column_type: Advice }, Rotation(3)), (Column { index: 8, column_type: Advice }, Rotation(0)), (Column { index: 8, column_type: Advice }, Rotation(1)), (Column { index: 8, column_type: Advice }, Rotation(2)), (Column { index: 8, column_type: Advice }, Rotation(3)), (Column { index: 9, column_type: Advice }, Rotation(0))], num_advice_queries: [1, 1, 4, 4, 4, 4, 4, 4, 4, 1], instance_queries: [(Column { index: 1, column_type: Instance }, Rotation(0))], fixed_queries: [(Column { index: 1, column_type: Fixed }, Rotation(0)), (Column { index: 0, column_type: Fixed }, Rotation(0))], permutation: Argument { columns: [Column { index: 1, column_type: Fixed }, Column { index: 2, column_type: Advice }, Column { index: 3, column_type: Advice }, Column { index: 4, column_type: Advice }, Column { index: 5, column_type: Advice }, Column { index: 6, column_type: Advice }, Column { index: 7, column_type: Advice }, Column { index: 8, column_type: Advice }, Column { index: 9, column_type: Advice }, Column { index: 1, column_type: Instance }] }, lookups: [Argument { input_expressions: [Advice { query_index: 30, column_index: 9, rotation: Rotation(0) }], table_expressions: [Fixed { query_index: 1, column_index: 0, rotation: Rotation(0) }] }], shuffles: [], general_column_annotations: {}, constants: [], minimum_degree: None }
primary_inital_preprcessing started
self.expressions(): 19
self.permutation_polys(): [1, 3, 14, 15, 16, 17, 18, 19, 20, 21]
num_poly: 21
num_challenges: 0
polys: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}
challenges: {}
Checking num_witness_polys.len() == num_challenges.len()
num_witness_polys.len(): 1
num_challenges.len(): 1
length_check: true
Checking !self.num_witness_polys.iter().any(|n| *n == 0)
Checking non_zero_witness_check: true
Checking !self.num_challenges[..self.num_challenges.len() - 1].iter().any(|n| *n == 0)
Checking non_zero_challenges_check: true
Checking polys.is_empty() || *polys.last().unwrap() < num_poly
Checking polys_range_check: false
Checking polys_range_check_1: false
Checking polys_range_check_2: false
Checking challenges.is_empty() || *challenges.last().unwrap() < num_challenges
Checking challenges_range_check: true
Checking max_degree and constraints
Checking max_degree_check: true
Final result: false
thread 'accumulation::protostar::ivc::halo2::test::gemini_kzg_ipa_protostar_hyperplonk_ivc' panicked at plonkish_backend/src/accumulation/protostar/hyperplonk.rs:74:9:
assertion failed: circuit_info.is_well_formed()
stack backtrace:
   0:        0x10310f794 - std::backtrace_rs::backtrace::libunwind::trace::hd5710a7611e3d56e
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5
   1:        0x10310f794 - std::backtrace_rs::backtrace::trace_unsynchronized::h68665fd17e5f8a7d
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5
   2:        0x10310f794 - std::sys_common::backtrace::_print_fmt::h57ac50d3be70ca63
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys_common/backtrace.rs:67:5
   3:        0x10310f794 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h9e6f5b6dff7351ee
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys_common/backtrace.rs:44:22
   4:        0x10312b87c - core::fmt::rt::Argument::fmt::hced102f619adf930
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/fmt/rt.rs:142:9
   5:        0x10312b87c - core::fmt::write::hd695f6f323113fa4
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/fmt/mod.rs:1117:17
   6:        0x10310d684 - std::io::Write::write_fmt::h2d56978b54c1b9c0
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/io/mod.rs:1762:15
   7:        0x10310f5d0 - std::sys_common::backtrace::_print::h728db9ad119c4970
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys_common/backtrace.rs:47:5
   8:        0x10310f5d0 - std::sys_common::backtrace::print::h65ce5b2d0dc0d357
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys_common/backtrace.rs:34:9
   9:        0x103110eb4 - std::panicking::default_hook::{{closure}}::h558f50bfdaa8c01a
  10:        0x103110bfc - std::panicking::default_hook::ha412fc42696c192f
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:292:9
  11:        0x1031112dc - std::panicking::rust_panic_with_hook::ha4a7cf37f717c783
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:731:13
  12:        0x1031111b8 - std::panicking::begin_panic_handler::{{closure}}::hf2ed6b7d223c4c15
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:601:13
  13:        0x10310fbfc - std::sys_common::backtrace::__rust_end_short_backtrace::h57d45a3109dcf9d2
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys_common/backtrace.rs:170:18
  14:        0x103110f78 - rust_begin_unwind
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:597:5
  15:        0x10315aadc - core::panicking::panic_fmt::h37068c283f2fbb8b
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/panicking.rs:72:14
  16:        0x10315ab50 - core::panicking::panic::h3d95c27cca824567
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/panicking.rs:127:5
  17:        0x102f2d568 - plonkish_backend::accumulation::protostar::ivc::halo2::preprocess::h8d4504d8a25b5c17
  18:        0x102f0de24 - plonkish_backend::accumulation::protostar::ivc::halo2::test::run_protostar_hyperplonk_ivc::h939869d4ea8775b7
  19:        0x102f3a428 - plonkish_backend::accumulation::protostar::ivc::halo2::test::gemini_kzg_ipa_protostar_hyperplonk_ivc::h0e39890e3c280c92
  20:        0x103031090 - core::ops::function::FnOnce::call_once::hb288b6d1080b86d8
  21:        0x103073da0 - core::ops::function::FnOnce::call_once::hd1a6c133ce596545
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/ops/function.rs:250:5
  22:        0x103073da0 - test::__rust_begin_short_backtrace::h665c810724821113
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/test/src/lib.rs:628:18
  23:        0x103072e7c - test::run_test_in_process::{{closure}}::h49df2da7fd660933
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/test/src/lib.rs:651:60
  24:        0x103072e7c - <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::h69e5c8770946231d
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/panic/unwind_safe.rs:271:9
  25:        0x103072e7c - std::panicking::try::do_call::ha5b3481f92cc2e29
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:504:40
  26:        0x103072e7c - std::panicking::try::he8442f1203de8ddd
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:468:19
  27:        0x103072e7c - std::panic::catch_unwind::h9c1b83088a22d612
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panic.rs:142:14
  28:        0x103072e7c - test::run_test_in_process::ha5451a88473df7c1
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/test/src/lib.rs:651:27
  29:        0x103072e7c - test::run_test::{{closure}}::h0e02b4f37b76b4ed
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/test/src/lib.rs:574:43
  30:        0x103046764 - test::run_test::{{closure}}::h7bc13775c87fce78
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/test/src/lib.rs:602:41
  31:        0x103046764 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha3c3d76d59588e26
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys_common/backtrace.rs:154:18
  32:        0x10304af48 - std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}::h4c0dfb23f2c55574
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/thread/mod.rs:529:17
  33:        0x10304af48 - <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::hb0bbe0e9b55f7cec
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/panic/unwind_safe.rs:271:9
  34:        0x10304af48 - std::panicking::try::do_call::h377315edacc9eeb6
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:504:40
  35:        0x10304af48 - std::panicking::try::ha55e8f1d82f1cb2a
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panicking.rs:468:19
  36:        0x10304af48 - std::panic::catch_unwind::h73772324df73e810
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/panic.rs:142:14
  37:        0x10304af48 - std::thread::Builder::spawn_unchecked_::{{closure}}::hbd9db33b0a843a4a
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/thread/mod.rs:528:30
  38:        0x10304af48 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h75f419748c4ccefc
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/core/src/ops/function.rs:250:5
  39:        0x103115164 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::haa20b21355512876
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/alloc/src/boxed.rs:2007:9
  40:        0x103115164 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h125a5fe0ba757b77
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/alloc/src/boxed.rs:2007:9
  41:        0x103115164 - std::sys::unix::thread::Thread::new::thread_start::h25b50e615a42f137
                               at /rustc/1c05d50c8403c56d9a8b6fb871f15aaa26fb5d07/library/std/src/sys/unix/thread.rs:108:17
  42:        0x18579c26c - __pthread_deallocate
test accumulation::protostar::ivc::halo2::test::gemini_kzg_ipa_protostar_hyperplonk_ivc ... FAILED

failures:

failures:
    accumulation::protostar::ivc::halo2::test::gemini_kzg_ipa_protostar_hyperplonk_ivc

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 15 filtered out; finished in 9.47s

error: test failed, to rerun pass `-p plonkish_backend --lib`
